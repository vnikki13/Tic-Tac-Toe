{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","onClick","onClickCallback","id","className","value","Board","squareList","squares","map","row","square","generateSquareComponents","WINNER","TURN","generateSquares","currentId","push","col","App","useState","setSquares","checkForWinner","allSquares","flat","forEach","condition","threeInARow","i","every","obj","newSquares","newRow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAwBeA,G,kBAnBA,SAACC,GAKd,OAAO,4BACLC,QAL0B,WAC1BD,EAAME,gBAAgBF,EAAMG,KAK5BC,UAAU,UAETJ,EAAMK,SC6BIC,EAnBD,SAAC,GAAkC,IACzCC,EAnByB,SAACC,EAASN,GAezC,OAdoBM,EAAQC,KAAI,SAACC,GAW/B,OAVmBA,EAAID,KAAI,SAACE,GAC1B,OACE,kBAAC,EAAD,CACAN,MAAOM,EAAON,MACdF,GAAIQ,EAAOR,GACXD,gBAAiBA,UAYJU,CAD2B,EAA/BJ,QAA+B,EAAtBN,iBAExB,OAAO,yBAAKE,UAAU,QACnBG,ICpBDM,EAAS,GACTC,EAAO,EAELC,EAAkB,WAKtB,IAJA,IAAMP,EAAU,GAEZQ,EAAY,EAEPN,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CACnCF,EAAQS,KAAK,IACb,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAChCV,EAAQE,GAAKO,KAAK,CAChBd,GAAIa,EACJX,MAAO,KAETW,GAAa,EAIjB,OAAOR,GAgFMW,EA7EH,WAAO,IAAD,EAEcC,mBAASL,KAFvB,mBAETP,EAFS,KAEAa,EAFA,KA+BVC,EAAiB,WACrB,IACMC,EAAaf,EAAQgB,OADL,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAG7FC,SAAQ,SAACC,GACrB,IAAIC,EAAc,GAClBD,EAAUD,SAAQ,SAACG,GACjBD,EAAYV,KAAKM,EAAWK,OAE1BD,EAAYE,OAAM,SAAAC,GAAG,MAAkB,MAAdA,EAAIzB,SAC/BQ,EAAS,yBACAc,EAAYE,OAAM,SAAAC,GAAG,MAAkB,MAAdA,EAAIzB,WACtCQ,EAAS,6BAITA,GAEOU,EAAWM,OAAM,SAAAC,GAAG,MAAkB,KAAdA,EAAIzB,WACnCQ,EAAS,gBAUf,OACE,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,iDACA,4BAAKS,GACL,4BAAQZ,QAXI,WAChBoB,EAAWN,KACXF,EAAS,GACTC,EAAO,IAQH,eAEF,8BACE,kBAAC,EAAD,CACEN,QAASA,EACTN,gBAlEa,SAACC,GACpB,IAAGU,EAAH,CAIA,IAAMkB,EAAavB,EAAQC,KAAI,SAACC,GAC9B,IAAMsB,EAAS,GAYf,OAXAtB,EAAIe,SAAQ,SAACd,GACPA,EAAOR,KAAOA,GAAuB,KAAjBQ,EAAON,QAC7BS,IAEEH,EAAON,MADLS,EAAO,IAAM,EAtCV,IACA,KA2CTkB,EAAOf,KAAKN,MAEPqB,KAGTX,EAAWU,GACPjB,EAAO,GACTQ,WC5CcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea1f51f8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  const onSquareButtonClick = () => {\n    props.onClickCallback(props.id);\n  }\n\n  return <button\n    onClick={onSquareButtonClick}\n    className=\"square\"\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  const madeSquares = squares.map((row) => {\n    const setSquares = row.map((square) => {\n      return(\n        <Square \n        value={square.value}\n        id={square.id}\n        onClickCallback={onClickCallback}\n        />\n      );\n    });\n\n    return (setSquares);\n  });\n\n  return(madeSquares);\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\nlet WINNER = '';\nlet TURN = 0;\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n\n  const updateSquare = (id) => {\n    if(WINNER) {\n      return;\n    }\n\n    const newSquares = squares.map((row) => {\n      const newRow = [];\n      row.forEach((square) => {\n        if (square.id === id && square.value === '') {\n          TURN++;\n          if (TURN % 2 === 1) {\n            square.value = PLAYER_1;\n          } else {\n            square.value = PLAYER_2;\n          }\n        }\n        newRow.push(square);\n      });\n      return newRow;\n    });\n\n    setSquares(newSquares);\n    if (TURN > 4) {\n      checkForWinner();\n    }\n  }\n\n  const checkForWinner = () => {\n    const winConditions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    const allSquares = squares.flat();\n\n    winConditions.forEach((condition) => {\n      let threeInARow = [];\n      condition.forEach((i) => {\n        threeInARow.push(allSquares[i]);\n      })\n      if (threeInARow.every(obj => obj.value === 'X')) {\n        WINNER = \"Player1 is the Winner!\";\n      } else if (threeInARow.every(obj => obj.value === 'O')) {\n        WINNER = \"Player2 is the Winner!\";\n      }\n    });\n\n    if (WINNER) {\n      return;\n    } else if (allSquares.every(obj => obj.value !== '')) {\n        WINNER = \"It's a tie!\";\n    }\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    WINNER = '';\n    TURN = 0;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{WINNER}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board \n          squares={squares} \n          onClickCallback={updateSquare}\n          />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}